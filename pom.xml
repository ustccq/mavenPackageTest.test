<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.test.springboot.osgi</groupId>
	<artifactId>servletbridge.test</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>servletbridge.test</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.build.jdk>1.8</project.build.jdk>
		<jdk.version>1.8</jdk.version>
		<mybatis-generator-maven-plugin.version>1.3.5</mybatis-generator-maven-plugin.version>
		<maven-compiler-plugin.version>3.7.0</maven-compiler-plugin.version>
		<maven-assembly-plugin.version>3.1.0</maven-assembly-plugin.version>
		<maven-shade-plugin.version>3.1.0</maven-shade-plugin.version>
		<maven-surefire-plugin.version>2.20</maven-surefire-plugin.version>
		<maven-war-plugin.version>3.1.0</maven-war-plugin.version>
		<skipTests>true</skipTests>
	</properties>
	<build>
		<plugins>
			<!-- 1.打包方式1,生成单独的lib文件夹,依赖jar包放到lib -->
			<!-- <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-jar-plugin</artifactId> 
				<version>3.0.2</version> <configuration> <archive> <manifest> <addClasspath>true</addClasspath> 
				<classpathPrefix>lib/</classpathPrefix> <mainClass>com.test.springboot.osgi.servletbridge.test.App</mainClass> 
				</manifest> </archive> </configuration> </plugin> <plugin> <groupId>org.apache.maven.plugins</groupId> 
				<artifactId>maven-dependency-plugin</artifactId> <version>3.0.2</version> 
				<executions> <execution> <id>copy-dependencies</id> <phase>package</phase> 
				<goals> <goal>copy-dependencies</goal> </goals> <configuration> <outputDirectory>${project.build.directory}/lib</outputDirectory> 
				</configuration> </execution> </executions> </plugin> -->

			<!-- 2.1 打包方式2,生成依赖jar包放到生成的jar包,使用 mvn package assembly:single -->
			<!-- <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-assembly-plugin</artifactId> 
				<version>2.5.5</version> <configuration> <archive> <manifest> <mainClass>com.test.springboot.osgi.servletbridge.test.App</mainClass> 
				</manifest> </archive> <descriptorRefs> <descriptorRef>jar-with-dependencies</descriptorRef> 
				</descriptorRefs> </configuration> </plugin> -->

			<!-- 2.2 打包方式2,生成依赖jar包放到生成的jar包,由于已经在xml中配置,故可直接使用 mvn package -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>${maven-assembly-plugin.version}</version>
				<configuration>
					<archive>
						<manifest>
							<mainClass>com.test.springboot.osgi.servletbridge.test.App</mainClass>
						</manifest>
						<manifestFile>META-INF/MANIFEST.MF</manifestFile>
					</archive>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
				</configuration>
				<executions>  
	                <execution>
	                    <id>make-assembly</id>
	                    <phase>package</phase>
	                    <goals>
	                        <goal>single</goal>
	                    </goals>
	                </execution>
            	</executions>
			</plugin>
			
			<!-- 3.打包方式3  使用maven-shade-plugin插件打包 -->
			<!-- <plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>${maven-shade-plugin.version}</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									指定main方法
									<mainClass>com.test.springboot.osgi.servletbridge.test.App</mainClass>
								</transformer>
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
									<resource>META-INF/MANIFEST.MF</resource>
								</transformer>
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin> -->
			
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<source>${project.build.jdk}</source>
					<target>${project.build.jdk}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
					<compilerArgs> 
		            	<arg>-extdirs</arg> 
		            	<arg>${project.basedir}/lib</arg>
        			</compilerArgs> 
				</configuration>
			</plugin>
		</plugins>
		<finalName>servletbridge.test</finalName>
	</build>
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.eclipse.platform/org.eclipse.equinox.servletbridge -->
		<dependency>
			<groupId>org.eclipse.platform</groupId>
			<artifactId>org.eclipse.equinox.servletbridge</artifactId>
			<version>1.4.0</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.eclipse.platform/org.eclipse.equinox.http.servletbridge -->
		<dependency>
			<groupId>org.eclipse.platform</groupId>
			<artifactId>org.eclipse.equinox.http.servletbridge</artifactId>
			<version>1.1.0</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.eclipse.platform/org.eclipse.equinox.http.servlet -->
		<dependency>
			<groupId>org.eclipse.platform</groupId>
			<artifactId>org.eclipse.equinox.http.servlet</artifactId>
			<version>1.5.0</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>4.0.1</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>
</project>
